# main solutioins are taken from here
# https://github.com/AxlLind/AdventOfCode2023

# biscardi solutions are taken from here
# https://github.com/ChristopherBiscardi/advent-of-code/tree/main/2023/rust
# Playlist: https://www.youtube.com/playlist?list=PLWtPciJ1UMuD3_8Pb-EqrFhkYpastR2cn

# jordankaye solution are taken from here
# https://github.com/jkaye2012/aoc2023
# The guy is trying to reach max efficiency
# Description: https://jordankaye.dev/posts/aoc-2023/

# ========================================================================

# Create the directory for a new day's puzzle and fetch the input
create day:
    cargo generate --path ./daily-template --name {{day}}
    just get-input {{day}}

# If this doesn't work do it in two steps:
# > just create day-<n>
# > /usr/bin/env cargo +nightly -Zscript scripts/get-aoc-input.rs --day day-<n> --current-working-directory .

# You can find SESSION by using Chrome tools:
# 1) Go to https://adventofcode.com/2023/day/1/input
# 2) right-click -> inspect -> click the "Application" tab.
# 3) Refresh
# 5) Click https://adventofcode.com under "Cookies"
# 6) Grab the value for session. Put it to an env var SESSION
# ```
# export SESSION=PASTE_COOKIE_VALUE_HERE
# ```

# get the input for a day's puzzle
get-input day:
    /usr/bin/env cargo +nightly -Zscript scripts/get-aoc-input.rs --day {{day}} --current-working-directory {{justfile_directory()}}
    # ./scripts/get-aoc-input.rs --day {{day}} --current-working-directory {{justfile_directory()}}

# Use `just work day-01 part1` to work on the specific binary for a specific day's problems
work day part:
    cargo watch -w {{day}} -x "check -p {{day}}" -s "just test {{day}} {{part}}" -s "just lint {{day}}" -s "just bench {{day}} {{part}}"

www-watch:
    RUST_LOG=info cargo +nightly leptos watch --project www

www-build:
    cargo +nightly leptos build --project www --release

lint day:
    cargo clippy -p {{day}}

test day part:
    cargo nextest run -p {{day}} {{part}}

bench-all:
    cargo bench -q > benchmarks.txt

bench day part:
    cargo bench --bench {{day}}-bench {{part}} >> {{day}}.bench.txt

flamegraph day part:
    cargo flamegraph --profile flamegraph --root --package {{day}} --bin {{part}} -o flamegraphs/{{day}}--{{part}}.svg

dhat day part:
    cargo run --profile dhat --features dhat-heap --package {{day}} --bin {{part}}
